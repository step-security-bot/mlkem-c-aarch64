# SPDX-License-Identifier: Apache-2.0

name: Setup nix
description: Setup nix

inputs:
  script:
    description: The script to be run in the nix shell
    required: false
  devShell:
    description: The name of the devShell
    required: true
  cache:
    description: Determine whether to enable nix cache
    default: 'true'
  verbose:
    description: Determine wether to suppress nix log or not
    default: 'false'

runs:
  using: composite
  steps:
    - name: Pre-check nix
      id: pre-check-nix
      if: ${{ env.NIX_SHELL == '' }}
      shell: bash -lo pipefail {0}
      run: |
        suppress() {
          local exit_code="$?"
          local line_no="$1"
          echo "Nix check failed at $line_no: $exit_code"
          echo "install-nix=true" >> $GITHUB_OUTPUT
          exit 0
        }

        trap 'suppress $LINENO' ERR

        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        nix --version
        nix config show | grep -E "^trusted-users = .*$USER"
        nix config show | grep -E "^experimental-features = .*flakes"
        nix config show | grep -E "^experimental-features = .*nix-command"

    - name: Install nix
      if: steps.pre-check-nix.outputs.install-nix
      shell: bash -leo pipefail {0}
      run: |
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm \
        --extra-conf "trusted-users = root ${USER:-}" \
        --extra-conf "experimental-features = nix-command flakes"

        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    - uses: DeterminateSystems/magic-nix-cache-action@v8
      if: ${{ inputs.cache == 'true' }}
      continue-on-error: true
    - name: Set Shell
      shell: bash -leo pipefail {0}
      run: |
        echo "::group::nix config check"
        nix config check
        nix config show
        if [[ ${{ inputs.cache }} == 'true' ]]; then
          nix show-config --extra-substituters 'http://127.0.0.1:37515?trusted=1&compression=zstd&parallel-compression=true&priority=1'
        fi
        echo NIX_SHELL="${{ inputs.devShell }}" >> $GITHUB_ENV
        nix_extra_flags="${{ inputs.verbose == 'false' && '--quiet' || '' }}"
        echo SHELL="$(which nix) develop $nix_extra_flags .#${{ inputs.devShell }} -c bash -e {0}" >> $GITHUB_ENV
        echo "::endgroup::"
    - name: Prepare nix dev shell
      shell: ${{ env.SHELL }}
      run: |
    - name: Dependency check
      shell: ${{ env.SHELL }}
      if: inputs.script != ''
      run: eval ${{ inputs.script }}
