# SPDX-License-Identifier: Apache-2.0

name: Functional tests
description: Run functional tests for MLKEM-C_AArch64

inputs:
  nix-shell:
    description: Run in the specified Nix environment if exists
    default: "ci"
  nix-cache:
    description: Determine whether to enable nix cache
    default: 'false'
  nix-verbose:
    description: Determine wether to suppress nix log or not
    default: 'false'
  custom_shell:
    description: The shell to use. Only relevant if no nix-shell specified
    default: "bash"
  gh_token:
    description: Github access token to use
    required: true
  cflags:
    description: CFLAGS to pass to compilation
    default: ""
  mode:
    description: For auto-determining the default cross-prefix (e.g. native | cross )
    default: "native"
  opt:
    description: opt flag to pass to test script
    default: "true"
  func:
    description: Determine whether to run functional test or not
    default: "true"
  kat:
    description: Determine whether to run kat test or not
    default: "true"
  nistkat:
    description: Determine whether to run nistkat test or not
    default: "true"
runs:
  using: composite
  steps:
      - name: Preprocess
        shell: bash
        run: |
          arch=$(uname -m)
          _cross_prefix=
          if [[ ${{ inputs.mode }} == "cross" && $arch == "x86_64" ]]; then
              _cross_prefix="aarch64-unknown-linux-gnu-"
          elif [[ ${{ inputs.mode }} == "cross" && $arch == "aarch64" ]]; then
              _cross_prefix="x86_64-unknown-linux-gnu-"
          fi

          echo _CROSS_PREFIX="$_cross_prefix" >> $GITHUB_ENV
          echo OPT="${{ inputs.opt == 'true' && 'opt' || 'no-opt' }}" >> $GITHUB_ENV
          echo FUNC="${{ inputs.func == 'true' && 'func' || 'no-func' }}" >> $GITHUB_ENV
          echo KAT="${{ inputs.kat == 'true' && 'kat' || 'no-kat' }}" >> $GITHUB_ENV
          echo NISTKAT="${{ inputs.nistkat == 'true' && 'nistkat' || 'no-nistkat' }}" >> $GITHUB_ENV
      - name: Setup nix
        uses: ./.github/actions/setup-shell
        with:
          nix-shell: ${{ inputs.nix-shell }}
          nix-cache: ${{ inputs.nix-cache }}
          nix-verbose: ${{ inputs.nix-verbose }}
          gh_token: ${{ inputs.gh_token }}
          custom_shell: ${{ inputs.custom_shell }}
      - name: System info
        shell: ${{ env.SHELL }}
        run: |
          ARCH=$(uname -m)
          echo <<-EOF
            ## Setup
            Architecture: $ARCH
            - $(uname -a)
            - $(nix --version)
            - $(bash --version | grep -m1 "")
            - $(${_CROSS_PREFIX}${CC} --version | grep -m1 "")
          EOF
          cat >> $GITHUB_STEP_SUMMARY <<-EOF
            ## Setup
            Architecture: $ARCH
            - $(uname -a)
            - $(nix --version)
            - $(bash --version | grep -m1 "")
            - $(${_CROSS_PREFIX}${CC} --version | grep -m1 "")
          EOF
      - name: Compile ${{ inputs.mode }} ${{ env.OPT }} tests (${{ env.FUNC }}, ${{ env.KAT }}, ${{ env.NISTKAT }})
        shell: ${{ env.SHELL }}
        run: |
          tests all  --cross-prefix="${{ env._CROSS_PREFIX }}" --cflags="${{ inputs.cflags }}" --${{ env.OPT }} --${{ env.FUNC }} --${{ env.KAT }} --${{ env.NISTKAT }} --compile --no-run -v
      - name: Run ${{ inputs.mode }} ${{ env.OPT }} tests (${{ env.FUNC }}, ${{ env.KAT }}, ${{ env.NISTKAT }})
        shell: ${{ env.SHELL }}
        run: |
          tests all  --cross-prefix="${{ env._CROSS_PREFIX }}" --cflags="${{ inputs.cflags }}" --${{ env.OPT }} --${{ env.FUNC }} --${{ env.KAT }} --${{ env.NISTKAT }} --no-compile --run -v
      - name: Check namespacing ${{ inputs.mode }} ${{ env.OPT }} tests (${{ env.FUNC }}, ${{ env.KAT }}, ${{ env.NISTKAT }})
        shell: ${{ env.SHELL }}
        run: |
          check-namespace
      - name: Post ${{ inputs.mode }} Tests
        shell: ${{ env.SHELL }}
        if: success() || failure()
        run: |
          make clean
